from django.shortcuts import render, redirect
from .api.pagar_me import PagarMeOrderApi
from .api.whatsapp import Whatsapp, formatar_numero
from .models import PagarMeOrder, PagarMeTransaction
from django.contrib import messages
from django.http import HttpResponse, HttpResponseNotFound
from django.core.exceptions import ObjectDoesNotExist
from django.shortcuts import get_object_or_404

ENVIAR_MENSAGEM = Whatsapp()


def index(request):
    """Renderiza a p√°gina inicial."""
    return render(request, "link/index.html")


def create_link(request):
    """Cria um link de pagamento e envia via WhatsApp."""
    if request.method == "POST":
        link_name = request.POST.get("linkName")
        link_value = request.POST.get("linkValue")
        installments = request.POST.get("installments")
        whatsapp = request.POST.get("whatsapp")

        # Valida√ß√£o de entrada
        if not link_name or not link_value or not installments or not whatsapp:
            messages.error(request, "Todos os campos s√£o obrigat√≥rios.")
            return redirect("link:index")

        # Formata√ß√£o do valor
        valor_formatado = (
            link_value.replace("R$", "")
            .replace(" ", "")
            .replace(".", "")
            .replace(",", ".")
            .strip()
        )

        try:
            total_amount = int(float(valor_formatado) * 100)

            # Limpa o link anterior da sess√£o
            if "generated_link" in request.session:
                del request.session["generated_link"]

            order = PagarMeOrder.objects.create(
                total_amount=total_amount,
                max_installments=int(installments),
                customer_name=link_name,
                whatsapp=whatsapp,
            )

            api_order = PagarMeOrderApi(total_amount, int(installments), str(link_name))
            response = api_order.create_order()
            link = response.get("checkouts", [{}])[0].get("payment_url", "")

            # Tenta enviar a mensagem via WhatsApp
            try:
                NUMERO_ENVIO = formatar_numero(numero=whatsapp)
                MESSAGE = (
                    f"Ol√°, {link_name}! üòä\n"
                    "Seu link est√° dispon√≠vel. üîó\n"
                    "Envie para seu cliente. üì§\n"
                    "Assim que recebermos o pagamento, avisaremos: üí∞\n"
                    f"{link} üì©"
                )
                ENVIAR_MENSAGEM.message_send_text(
                    NUMERO_ENVIO, MESSAGE
                )
            except Exception as sms_error:
                messages.warning(request, f"Mensagem n√£o enviada: {str(sms_error)}")

            PagarMeTransaction.objects.create(
                order=order,
                transaction_id=response.get("id", ""),
                status=response.get("status", "pending"),
                link=link,
            )

            # Armazena o novo link gerado na sess√£o
            request.session["generated_link"] = link
            messages.success(request, "Link gerado com sucesso!")
            return redirect("link:index")  # Redireciona ap√≥s sucesso

        except ValueError as e:
            messages.error(request, f"Erro de valor: {str(e)}")
            return redirect("link:index")
        except Exception as e:
            messages.error(request, f"Ocorreu um erro inesperado: {str(e)}")
            return redirect("link:index")

    messages.error(request, "Erro: M√©todo n√£o suportado.")
    return HttpResponse("Erro: M√©todo n√£o suportado.")  # Resposta para m√©todos n√£o POST


def paid_transaction(request, transaction_id):
    """Processa a confirma√ß√£o de um pagamento."""
    if request.method == "GET":
        try:
            transaction = PagarMeTransaction.objects.get(transaction_id=transaction_id)

            if transaction.status == "pending":
                transaction.status = "Pago"
                transaction.save()

                # Tenta enviar a mensagem de confirma√ß√£o via WhatsApp
                try:
                    NUMERO_ENVIO = formatar_numero(numero=transaction.order.whatsapp)
                    valor_em_reais = (
                        transaction.order.total_amount / 100
                    )  # Converte para reais

                    ENVIAR_MENSAGEM.message_send_text(
                        NUMERO_ENVIO,
                        f"Ol√°! Seu pedido no valor de R${valor_em_reais:.2f} foi recebido e est√° marcado como PAGO. Obrigado pela sua compra!",
                    )
                except Exception as sms_error:
                    messages.warning(
                        request,
                        f"Mensagem de confirma√ß√£o n√£o enviada: {str(sms_error)}",
                    )
                return HttpResponse("teste j√° √© pago.")
                # return render(request, 'link/sucess.html')
            else:
                return HttpResponse("Estado j√° √© pago.")

        except ObjectDoesNotExist:
            return HttpResponseNotFound("Transa√ß√£o n√£o encontrada.")

        except Exception as e:
            return HttpResponse(f"Ocorreu um erro: {str(e)}")

    return HttpResponse("M√©todo de requisi√ß√£o inv√°lido.")








import requests

url = "https://api.pagar.me/core/v5/paymentlinks"

payload = {
    "is_building": False,
    "payment_settings": {
        "credit_card_settings": {
            "installments_setup": {
                "interest_type": "simple",
                "max_installments": 3,
                "amount": 10000,
                "free_installments": 3,
                "interest_rate": 1
            },
            "operation_type": "auth_and_capture",
            "delay_to_capture": 1000
        },
        "accepted_payment_methods": ["credit_card"],
        "statement_descriptor": "Bibelo"
    },
    "cart_settings": { "items": [
            {
                "name": "Venda Whatsapp",
                "amount": 10000,
                "default_quantity": 1
            }
        ] },
    "name": "Bruno", #TODO Nome que para pesquisa do link 
    "type": "order",
    "expires_in": 1000,
    "max_paid_sessions": 1
}
headers = {
    "accept": "application/json",
    "content-type": "application/json",
    "authorization": "Basic ***************"
}

response = requests.post(url, json=payload, headers=headers)

print(response.text)


{
  "id": "pl_m3wWBaEb7JRObQXiKIjKyLov1KQ9AnV2",
  "name": "Bruno",
  "order_code": "pl_m3wWBaEb7JRObQXiKIjKyLov1KQ9AnV2",
  "url": "https://payment-link.pagar.me/pl_m3wWBaEb7JRObQXiKIjKyLov1KQ9AnV2",
  "payment_link_type": "order",
  "status": "active",
  "expiration_date": "2024-10-20T05:40:05.8669517Z",
  "expires_in": 1000,
  "max_sessions": 0,
  "total_sessions": 0,
  "max_paid_sessions": 1,
  "total_paid_sessions": 0,
  "created_at": "2024-10-19T13:00:05.8669387Z",
  "updated_at": "2024-10-19T13:00:05.8669388Z",
  "payment_settings": {
    "accepted_payment_methods": [
      "credit_card"
    ],
    "accepted_multi_payment_methods": [],
    "statement_descriptor": "Bibelo",
    "credit_card_settings": {
      "operation_type": "auth_and_capture",
      "installments": [
        {
          "number": 1,
          "total": 10000
        },
        {
          "number": 2,
          "total": 10000
        },
        {
          "number": 3,
          "total": 10000
        }
      ]
    },
    "google_pay_enabled": false,
    "apple_pay_enabled": false,
    "threed_secure_enabled": false,
    "click_to_pay_enabled": false
  },
  "cart_settings": {
    "shipping_cost": 0,
    "shipping_total_cost": 0,
    "items_total_cost": 10000,
    "total_cost": 10000,
    "items": [
      {
        "name": "Venda Whatsapp",
        "amount": 10000,
        "shipping_cost": 0,
        "default_quantity": 1
      }
    ]
  },
  "layout_settings": {
    "url": "https://www.bibelo.com.br/",
    "primary_color": "#088037",
    "secondary_color": "#088037"
  },
  "flow_settings": {},
  "checkout_settings": {
    "accepted_brands": [
      "VISA",
      "MASTERCARD",
      "HIPERCARD",
      "DISCOVER",
      "DINERS",
      "AMEX",
      "ELO",
      "AURA",
      "JCB",
      "CABAL"
    ],
    "address_type": "brazilian",
    "enabled": true,
    "required_fields": [
      "customer.email",
      "customer.document",
      "customer.mobile_phone",
      "customer.name"
    ]
  },
  "account_settings": {
    "merchant_id": "merch_z6mwlXrs5TEQ21Vk",
    "account_id": "acc_6XgnEXwu8tN51xOd"
  }
}
    